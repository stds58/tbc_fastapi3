https://habr.com/ru/companies/amvera/articles/849836/
https://habr.com/ru/companies/amvera/articles/850470/
https://habr.com/ru/companies/amvera/articles/855740/

Core и ORM
Core — это низкоуровневый подход, который позволяет выполнять запросы с использованием SQL-выражений,
    обеспечивая полный контроль над процессом.
    Этот стиль подходит тем, кто хочет максимально приблизиться к стандартному SQL или
    имеет особые требования к производительности.

ORM (Object-Relational Mapping) — это стиль, в котором фреймворк отображает таблицы базы данных как Python-классы.
    С ORM вы работаете с объектами, а не со строками SQL.
    Именно на этот стиль мы будем ориентироваться, так как он более удобен, универсален и популярен среди разработчиков.

Основные компоненты ORM
Работа с SQLAlchemy в стиле ORM включает в себя несколько ключевых понятий:
    Модели таблиц — это Python-классы, представляющие таблицы базы данных.
        Эти классы содержат информацию о структуре таблиц, таких как колонки, типы данных и связи между таблицами.

    Сессии — объекты, через которые осуществляется взаимодействие с базой данных.
        Они позволяют выполнять запросы и фиксировать изменения.
        Сессия открывается в начале работы с базой и закрывается в конце, обеспечивая связь с базой данных на протяжении одного «сеанса».

    Фабрика сессий — это шаблон для создания сессий.
        Она используется для управления подключением к базе данных и создания новых сессий по мере необходимости.


Краткое описание модулей
Alembic: Инструмент для управления и миграции схемы базы данных.
    Используется для внесения изменений в структуру базы данных (добавление, удаление, изменение таблиц и столбцов).

SQLAlchemy: Основная библиотека для работы с базами данных в Python,
    обеспечивающая ORM (объектно-реляционное отображение) и средства для выполнения SQL-запросов.

Pydantic: Библиотека для валидации данных и управления типами данных в Python.
    Pydantic позволяет удобно определять схемы данных и проверять их на соответствие типам.
    В будущем мы будем использовать эту библиотеку для трансформации данных из SQLAlchemy в привычные нам объекты, такие как словари.

Pydantic-settings: Дополнение к Pydantic, позволяющее легко управлять конфигурационными настройками приложений,
    используя Pydantic для валидации и типизации.
    Будем использовать для работы с переменными окружения, которые позволят нам подключаться к базе данных PostgreSQL.

Asyncpg: Асинхронный движок для работы с PostgreSQL через SQLAlchemy.


